(define (prime? x)
  (cond ((or (= x 2) (= x 3)) #t)
        ((or (= (remainder x 6) 1) (= (remainder x 6) 5))
          (prime-iter x))
        (else #f)))

(define (prime-iter x)
  (define (help x i)
    (let ((bound (if (= (remainder x 2) 0)
                     (/ x 2)
                     (/ (- x 1) 2))))
      (cond ((> i bound) #t)
            ((= (remainder x i) 0) #f)
            (else (help x (+ i 1))))))
  (help x 2))
